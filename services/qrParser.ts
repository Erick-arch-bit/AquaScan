import { AuthService } from './auth';

/**
 * Servicio de an√°lisis de c√≥digos QR
 * Maneja el an√°lisis y validaci√≥n de cadenas de c√≥digos QR
 * Formato: Evento/Ubicaci√≥n/Zona/Fecha/Hora/No.brazalete
 */

export interface QRData {
  evento: string;           // 4 d√≠gitos - C√≥digo del evento
  ubicacion: string;        // 4 d√≠gitos - C√≥digo de ubicaci√≥n
  zona: string;            // 2 d√≠gitos - C√≥digo de zona
  fecha: string;           // Fecha del evento
  hora: string;            // Hora del evento
  numeroBrazalete: string; // 8 d√≠gitos - N√∫mero √∫nico del brazalete
  raw: string;             // Cadena original completa
}

export interface QRParseResult {
  success: boolean;
  data?: QRData;
  error?: string;
  errorCode?: string;
}

export interface QRValidationResult {
  valid: boolean;
  errors: string[];
  warnings: string[];
}

export interface APISubmissionData {
  evento: string;
  ubicacion: string;
  zona: string;
  fecha: string;
  hora: string;
  numero_brazalete: string;
  cadena_original: string;
  timestamp_procesamiento: string;
  usuario_verificador?: string;
}

/**
 * C√≥digos de error para diferentes tipos de fallos
 */
export enum QRErrorCodes {
  EMPTY_STRING = 'EMPTY_STRING',
  INVALID_FORMAT = 'INVALID_FORMAT',
  INVALID_FIELD_COUNT = 'INVALID_FIELD_COUNT',
  INVALID_EVENTO = 'INVALID_EVENTO',
  INVALID_UBICACION = 'INVALID_UBICACION',
  INVALID_ZONA = 'INVALID_ZONA',
  INVALID_FECHA = 'INVALID_FECHA',
  INVALID_HORA = 'INVALID_HORA',
  INVALID_BRAZALETE = 'INVALID_BRAZALETE',
  PARSING_ERROR = 'PARSING_ERROR'
}

export class QRParserService {
  private static readonly EXPECTED_PARTS = 6;
  private static readonly SEPARATOR = '/';
  
  // Expresiones regulares para validaci√≥n
  private static readonly REGEX_PATTERNS = {
    evento: /^\d{4}$/,           // Exactamente 4 d√≠gitos
    ubicacion: /^\d{4}$/,        // Exactamente 4 d√≠gitos
    zona: /^\d{2}$/,             // Exactamente 2 d√≠gitos
    numeroBrazalete: /^\d{8}$/,  // Exactamente 8 d√≠gitos
    fecha: /^\d{4}-\d{2}-\d{2}$/, // Formato YYYY-MM-DD
    hora: /^\d{2}:\d{2}$/        // Formato HH:MM
  };

  /**
   * Analizar cadena de c√≥digo QR en datos estructurados
   * Formato esperado: Evento/Ubicaci√≥n/Zona/Fecha/Hora/No.brazalete
   * 
   * Especificaciones:
   * - Evento: 4 d√≠gitos
   * - Ubicaci√≥n: 4 d√≠gitos
   * - Zona: 2 d√≠gitos
   * - Fecha: Formato YYYY-MM-DD
   * - Hora: Formato HH:MM
   * - No.brazalete: 8 d√≠gitos
   */
  static parseQRCode(qrString: string): QRParseResult {
    try {
      console.log('üîç Iniciando an√°lisis de c√≥digo QR...');
      console.log('üì± Cadena recibida:', qrString);

      // Validaci√≥n inicial
      const cleanString = qrString?.trim();
      
      if (!cleanString) {
        return {
          success: false,
          error: 'Cadena QR vac√≠a o nula',
          errorCode: QRErrorCodes.EMPTY_STRING
        };
      }

      // Dividir por el separador
      const parts = cleanString.split(this.SEPARATOR);
      
      // Validar n√∫mero de partes
      if (parts.length !== this.EXPECTED_PARTS) {
        return {
          success: false,
          error: `Formato QR inv√°lido. Se esperaban ${this.EXPECTED_PARTS} partes separadas por '${this.SEPARATOR}', se encontraron ${parts.length}. Formato esperado: Evento/Ubicaci√≥n/Zona/Fecha/Hora/No.brazalete`,
          errorCode: QRErrorCodes.INVALID_FIELD_COUNT
        };
      }

      // Extraer y limpiar cada parte
      const [
        evento,
        ubicacion,
        zona,
        fecha,
        hora,
        numeroBrazalete
      ] = parts.map(part => part.trim());

      console.log('üìä Partes extra√≠das:', { evento, ubicacion, zona, fecha, hora, numeroBrazalete });

      // Validar cada campo
      const validationResult = this.validateFields({
        evento,
        ubicacion,
        zona,
        fecha,
        hora,
        numeroBrazalete
      });

      if (!validationResult.valid) {
        return {
          success: false,
          error: validationResult.errors.join(', '),
          errorCode: this.getErrorCodeFromValidation(validationResult.errors[0])
        };
      }

      // Crear objeto de datos estructurados
      const qrData: QRData = {
        evento,
        ubicacion,
        zona,
        fecha,
        hora,
        numeroBrazalete,
        raw: cleanString
      };

      console.log('‚úÖ An√°lisis de QR exitoso');
      return {
        success: true,
        data: qrData
      };

    } catch (error) {
      console.error('üí• Error al procesar QR:', error);
      return {
        success: false,
        error: `Error al procesar QR: ${error instanceof Error ? error.message : 'Error desconocido'}`,
        errorCode: QRErrorCodes.PARSING_ERROR
      };
    }
  }

  /**
   * Validar campos individuales seg√∫n especificaciones
   */
  private static validateFields(fields: {
    evento: string;
    ubicacion: string;
    zona: string;
    fecha: string;
    hora: string;
    numeroBrazalete: string;
  }): QRValidationResult {
    const errors: string[] = [];
    const warnings: string[] = [];

    // Validar evento (4 d√≠gitos)
    if (!fields.evento) {
      errors.push('Campo Evento vac√≠o (posici√≥n 1)');
    } else if (!this.REGEX_PATTERNS.evento.test(fields.evento)) {
      errors.push(`Campo Evento debe tener exactamente 4 d√≠gitos, recibido: "${fields.evento}" (${fields.evento.length} caracteres)`);
    }

    // Validar ubicaci√≥n (4 d√≠gitos)
    if (!fields.ubicacion) {
      errors.push('Campo Ubicaci√≥n vac√≠o (posici√≥n 2)');
    } else if (!this.REGEX_PATTERNS.ubicacion.test(fields.ubicacion)) {
      errors.push(`Campo Ubicaci√≥n debe tener exactamente 4 d√≠gitos, recibido: "${fields.ubicacion}" (${fields.ubicacion.length} caracteres)`);
    }

    // Validar zona (2 d√≠gitos)
    if (!fields.zona) {
      errors.push('Campo Zona vac√≠o (posici√≥n 3)');
    } else if (!this.REGEX_PATTERNS.zona.test(fields.zona)) {
      errors.push(`Campo Zona debe tener exactamente 2 d√≠gitos, recibido: "${fields.zona}" (${fields.zona.length} caracteres)`);
    }

    // Validar fecha
    if (!fields.fecha) {
      errors.push('Campo Fecha vac√≠o (posici√≥n 4)');
    } else {
      if (!this.REGEX_PATTERNS.fecha.test(fields.fecha)) {
        warnings.push(`Formato de fecha no est√°ndar: "${fields.fecha}" (se esperaba YYYY-MM-DD)`);
      }
      
      // Validar que la fecha sea v√°lida
      const dateObj = new Date(fields.fecha);
      if (isNaN(dateObj.getTime())) {
        errors.push(`Fecha inv√°lida: "${fields.fecha}"`);
      }
    }

    // Validar hora
    if (!fields.hora) {
      errors.push('Campo Hora vac√≠o (posici√≥n 5)');
    } else {
      if (!this.REGEX_PATTERNS.hora.test(fields.hora)) {
        warnings.push(`Formato de hora no est√°ndar: "${fields.hora}" (se esperaba HH:MM)`);
      }
      
      // Validar que la hora sea v√°lida (0-23:0-59)
      const [hours, minutes] = fields.hora.split(':').map(Number);
      if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
        errors.push(`Hora inv√°lida: "${fields.hora}"`);
      }
    }

    // Validar n√∫mero de brazalete (8 d√≠gitos)
    if (!fields.numeroBrazalete) {
      errors.push('N√∫mero de brazalete vac√≠o (posici√≥n 6)');
    } else if (!this.REGEX_PATTERNS.numeroBrazalete.test(fields.numeroBrazalete)) {
      errors.push(`N√∫mero de brazalete debe tener exactamente 8 d√≠gitos, recibido: "${fields.numeroBrazalete}" (${fields.numeroBrazalete.length} caracteres)`);
    }

    return {
      valid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * Obtener c√≥digo de error basado en el mensaje de validaci√≥n
   */
  private static getErrorCodeFromValidation(errorMessage: string): string {
    if (errorMessage.includes('Evento')) return QRErrorCodes.INVALID_EVENTO;
    if (errorMessage.includes('Ubicaci√≥n')) return QRErrorCodes.INVALID_UBICACION;
    if (errorMessage.includes('Zona')) return QRErrorCodes.INVALID_ZONA;
    if (errorMessage.includes('Fecha')) return QRErrorCodes.INVALID_FECHA;
    if (errorMessage.includes('Hora')) return QRErrorCodes.INVALID_HORA;
    if (errorMessage.includes('brazalete')) return QRErrorCodes.INVALID_BRAZALETE;
    return QRErrorCodes.INVALID_FORMAT;
  }

  /**
   * Validar datos QR analizados
   */
  static validateQRData(data: QRData): QRValidationResult {
    return this.validateFields({
      evento: data.evento,
      ubicacion: data.ubicacion,
      zona: data.zona,
      fecha: data.fecha,
      hora: data.hora,
      numeroBrazalete: data.numeroBrazalete
    });
  }

  /**
   * Formatear datos QR para env√≠o a la API
   */
  static async formatForAPI(data: QRData): Promise<APISubmissionData> {
    const userEmail = await AuthService.getUserEmail();
    
    return {
      evento: data.evento,
      ubicacion: data.ubicacion,
      zona: data.zona,
      fecha: data.fecha,
      hora: data.hora,
      numero_brazalete: data.numeroBrazalete,
      cadena_original: data.raw,
      timestamp_procesamiento: new Date().toISOString(),
      usuario_verificador: userEmail || 'usuario_desconocido'
    };
  }

  /**
   * Registrar datos analizados en consola con informaci√≥n detallada de campos
   */
  static logParsedData(data: QRData): void {
    console.log('üîç === DATOS QR DESCOMPUESTOS ===');
    console.log('üì± Cadena Original:', data.raw);
    console.log('üé™ Evento (4 d√≠gitos):', data.evento);
    console.log('üìç Ubicaci√≥n (4 d√≠gitos):', data.ubicacion);
    console.log('üè∑Ô∏è Zona (2 d√≠gitos):', data.zona);
    console.log('üìÖ Fecha:', data.fecha);
    console.log('‚è∞ Hora:', data.hora);
    console.log('üé´ N. Brazalete (8 d√≠gitos):', data.numeroBrazalete);
    console.log('‚è∞ Procesado:', new Date().toLocaleString());
    console.log('================================');
    
    // Registro adicional para depuraci√≥n
    const validation = this.validateQRData(data);
    console.log('üîß === VALIDACI√ìN DE FORMATO ===');
    console.log('üìä Total de campos:', this.EXPECTED_PARTS);
    console.log('‚úÖ Estado de validaci√≥n:', validation.valid ? 'V√ÅLIDO' : 'INV√ÅLIDO');
    
    if (validation.errors.length > 0) {
      console.log('‚ùå Errores:', validation.errors);
    }
    
    if (validation.warnings.length > 0) {
      console.log('‚ö†Ô∏è Advertencias:', validation.warnings);
    }
    
    console.log('‚úÖ Validaciones:', [
      this.REGEX_PATTERNS.evento.test(data.evento) ? '‚úì Evento (4 d√≠gitos)' : `‚úó Evento (${data.evento.length} chars)`,
      this.REGEX_PATTERNS.ubicacion.test(data.ubicacion) ? '‚úì Ubicaci√≥n (4 d√≠gitos)' : `‚úó Ubicaci√≥n (${data.ubicacion.length} chars)`,
      this.REGEX_PATTERNS.zona.test(data.zona) ? '‚úì Zona (2 d√≠gitos)' : `‚úó Zona (${data.zona.length} chars)`,
      this.REGEX_PATTERNS.fecha.test(data.fecha) ? '‚úì Fecha (YYYY-MM-DD)' : '‚ö† Fecha (formato no est√°ndar)',
      this.REGEX_PATTERNS.hora.test(data.hora) ? '‚úì Hora (HH:MM)' : '‚ö† Hora (formato no est√°ndar)',
      this.REGEX_PATTERNS.numeroBrazalete.test(data.numeroBrazalete) ? '‚úì N.Brazalete (8 d√≠gitos)' : `‚úó N.Brazalete (${data.numeroBrazalete.length} chars)`
    ].join(', '));
    console.log('===================================');
  }

  /**
   * Obtener descripciones de campos para depuraci√≥n
   */
  static getFieldDescriptions(): Record<string, string> {
    return {
      evento: 'C√≥digo del evento (4 d√≠gitos num√©ricos)',
      ubicacion: 'C√≥digo de ubicaci√≥n (4 d√≠gitos num√©ricos)', 
      zona: 'C√≥digo de zona (2 d√≠gitos num√©ricos)',
      fecha: 'Fecha del evento (formato YYYY-MM-DD)',
      hora: 'Hora del evento (formato HH:MM)',
      numeroBrazalete: 'N√∫mero √∫nico del brazalete (8 d√≠gitos num√©ricos)'
    };
  }

  /**
   * Probar analizador QR con datos de muestra
   */
  static testParser(): void {
    console.log('üß™ === PRUEBA DEL ANALIZADOR QR ===');
    
    const testCases = [
      // Casos v√°lidos
      '1234/5678/01/2024-01-15/10:30/12345678',
      '9876/5432/99/2024-01-16/14:00/87654321',
      '0001/0002/03/2024-01-17/20:15/11111111',
      
      // Casos inv√°lidos para probar validaci√≥n
      '123/5678/01/2024-01-15/10:30/12345678',  // Evento: 3 d√≠gitos
      '1234/567/01/2024-01-15/10:30/12345678',  // Ubicaci√≥n: 3 d√≠gitos
      '1234/5678/1/2024-01-15/10:30/12345678',  // Zona: 1 d√≠gito
      '1234/5678/01/2024-01-15/10:30/1234567',  // Brazalete: 7 d√≠gitos
      '1234/5678/01/fecha/10:30/12345678',      // Fecha inv√°lida
      '1234/5678/01/2024-01-15/25:30/12345678', // Hora inv√°lida
    ];

    testCases.forEach((testCase, index) => {
      console.log(`\nüìù Caso de prueba ${index + 1}:`);
      console.log('Entrada:', testCase);
      
      const result = this.parseQRCode(testCase);
      if (result.success && result.data) {
        console.log('‚úÖ An√°lisis exitoso');
        this.logParsedData(result.data);
      } else {
        console.log('‚ùå Error:', result.error);
        console.log('üîß C√≥digo de error:', result.errorCode);
      }
    });
    
    console.log('===============================');
  }

  /**
   * Generar c√≥digo QR de muestra para pruebas
   */
  static generateSampleQR(): string {
    const evento = Math.floor(1000 + Math.random() * 9000).toString(); // 4 d√≠gitos
    const ubicacion = Math.floor(1000 + Math.random() * 9000).toString(); // 4 d√≠gitos
    const zona = Math.floor(10 + Math.random() * 90).toString(); // 2 d√≠gitos
    const fecha = '2024-01-15';
    const hora = '10:30';
    const numeroBrazalete = Math.floor(10000000 + Math.random() * 90000000).toString(); // 8 d√≠gitos
    
    return `${evento}/${ubicacion}/${zona}/${fecha}/${hora}/${numeroBrazalete}`;
  }

  /**
   * Obtener estad√≠sticas de an√°lisis
   */
  static getParsingStats(results: QRParseResult[]): {
    total: number;
    successful: number;
    failed: number;
    successRate: number;
    errorBreakdown: Record<string, number>;
  } {
    const total = results.length;
    const successful = results.filter(r => r.success).length;
    const failed = total - successful;
    const successRate = total > 0 ? (successful / total) * 100 : 0;
    
    const errorBreakdown: Record<string, number> = {};
    results.filter(r => !r.success).forEach(r => {
      const errorCode = r.errorCode || 'UNKNOWN';
      errorBreakdown[errorCode] = (errorBreakdown[errorCode] || 0) + 1;
    });

    return {
      total,
      successful,
      failed,
      successRate,
      errorBreakdown
    };
  }
}